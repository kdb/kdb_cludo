<?php

use Drupal\kdb_cludo\Services\CludoApiService;

/**
 * Remove elements from the list of automatically ignored config entities.
 *
 * The elements have been added because an administrative user have updated the
 * configuration. This may only be a temporary measure. Unignoring entities will
 * bring them back to following the default of the project.
 *
 * @param string[] $entities
 *   The names of the entities which should no longer be ignored.
 *
 * @return string
 *   The feedback message.
 */
function _kdb_cludo_config_auto_unignore_entites(array $entities): string {
  $config_ignore_settings = \Drupal::configFactory()->getEditable('config_ignore_auto.settings');
  $ignored_configs = $config_ignore_settings->get('ignored_config_entities');

  $updated_ignored_configs = array_diff($ignored_configs, $entities);
  $config_ignore_settings->set('ignored_config_entities', $updated_ignored_configs)->save();
  $removed_ignored_entities_string = implode(', ', array_intersect($ignored_configs, $entities));
  if ($removed_ignored_entities_string) {
    return "Removed $removed_ignored_entities_string from config_ignore_auto.ignored_config_entities.";
  }
  else {
    return "No entities removed from config_ignore_auto.ignored_config_entities.";
  }
}

/**
 * Add elements to the list of automatically ignored config entities.
 *
 * @param string[] $entities
 *   The names of the entities which should be ignored.
 *
 * @return string
 *   The feedback message.
 */
function _kdb_cludo_config_auto_ignore_entites(array $entities): string {
  $config_ignore_settings = \Drupal::configFactory()->getEditable('config_ignore_auto.settings');
  $ignored_configs = $config_ignore_settings->get('ignored_config_entities');

  $updated_ignored_configs = array_merge($ignored_configs, $entities);
  $config_ignore_settings->set('ignored_config_entities', $updated_ignored_configs)->save();
  $ignored_entities_string = implode(', ', $entities);

  return "Added $ignored_entities_string to config_ignore_auto.ignored_config_entities.";
}

/**
 * Installing/uninstalling custom node fields.
 */
function _kdb_cludo_install_fields(): string {
  $return = "Installing custom kdb_cludo fields..\r\n";
  $fields = CludoApiService::getFieldDefinitions();

  $definition_manager = \Drupal::entityDefinitionUpdateManager();

  foreach ($fields as $key => $field) {
    $definition_manager->installFieldStorageDefinition($key, 'node', 'node', $field);
    $return .= "Field node.$key installed. \r\n";
  }

  return $return;
}

/**
 * Implements hook_install().
 *
 * - Make sure the kdb_cludo config is added to config ignore.
 * - Add custom fields for marking content as english.
 */
function kdb_cludo_install(): string {
  $return = _kdb_cludo_config_auto_ignore_entites(['*kdb_cludo*']);
  $return .= _kdb_cludo_install_fields();
  return $return;
}

/**
 * Implements hook_uninstall().
 *
 * Remove any persistant config related to kdb_cludo.
 */
function kdb_cludo_uninstall(): string {
  $return = _kdb_cludo_config_auto_unignore_entites(['*kdb_cludo*']);
  return $return;
}

/**
 * Add custom fields for marking content as english.
 */
function kdb_cludo_update_10001(): string {
  return _kdb_cludo_install_fields();
}
